library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(dplyr)
library(CellChat)
library(readr)
library(tibble)
library(lobstr)

rm(list = ls())
gc()

setwd("/home/yll/cell_cell_interaction/apply_in_stCID/OtherMethods/CellChatV2/")

ptm = Sys.time()

### load st data
st_count <- Read10X('~/cell_cell_interaction/apply_in_stCID/data/CID4465/10X_visium/filtered_count_matrix/',
                    gene.column = 1)
st_metadata <- read_csv("~/cell_cell_interaction/apply_in_stCID/data/CID4465/10X_visium/CID4465_metadata.csv") %>% 
  column_to_rownames(.,var = "...1")
st.se <- CreateSeuratObject(st_count, meta.data = st_metadata, assay = 'Spatial')
st.se <- SCTransform(st.se, assay = "Spatial", verbose = FALSE)
data.input = Seurat::GetAssayData(st.se, slot = "data", assay = "SCT") # normalized data matrix

### load setreoscope decompositon results
st_coef <- read.delim("~/cell_cell_interaction/apply_in_stCID/data/CID4465/decon_results/W.2022-05-15135505.473576.tsv")
st_coef <- column_to_rownames(st_coef, var="X")
colnames(st_coef) <- gsub('\\.', '_',colnames(st_coef))

meta = data.frame(labels = colnames(st_coef)[apply(st_coef, 1, which.max)], row.names = rownames(st_coef))
unique(meta$labels) # check the cell labels

### load spatial imaging information
scale.factors = jsonlite::fromJSON(txt = file.path("~/cell_cell_interaction/apply_in_stCID/data/CID4465/10X_visium/spatial/", 'scalefactors_json.json'))
scale.factors = list(spot.diameter = 65, spot = scale.factors$spot_diameter_fullres, # these two information are required
                     fiducial = scale.factors$fiducial_diameter_fullres, hires = scale.factors$tissue_hires_scalef, lowres = scale.factors$tissue_lowres_scalef # these three information are not required
)

positions_ls <- read_csv("~/cell_cell_interaction/apply_in_stCID/data/CID4465/10X_visium/spatial/tissue_positions_list.csv",
                         col_names = F) 
spatial.locs <- data.frame(spot=positions_ls$X1, imagerow=positions_ls$X5,imagecol=positions_ls$X6)
spatial.locs <- spatial.locs[which(spatial.locs$spot %in% colnames(st_count)),]
rownames(spatial.locs) <- NULL
spatial.locs <- column_to_rownames(spatial.locs, var = 'spot')

### Creat a CellChat object
cellchat <- createCellChat(object = data.input, meta = meta, group.by = "labels",
                           datatype = "spatial", coordinates = spatial.locs, scale.factors = scale.factors)

# Set the ligand-receptor interaction database
CellChatDB <- CellChatDB.human # use CellChatDB.human if running on human data
CellChatDB.use <- CellChatDB # simply use the default CellChatDB

# set the used database in the object
cellchat@DB <- CellChatDB.use

### Preprocessing the expression data for cell-cell communication analysis
# subset the expression data of signaling genes for saving computation cost
cellchat <- subsetData(cellchat) # This step is necessary even if using the whole database
future::plan("multisession", workers = 4) 
cellchat <- identifyOverExpressedGenes(cellchat)
cellchat <- identifyOverExpressedInteractions(cellchat)

### Inference of cell-cell communication network

cellchat <- computeCommunProb(cellchat, type = "truncatedMean", trim = 0.1, 
                              distance.use = TRUE, interaction.range = 250, scale.distance = 0.01)
# Filter out the cell-cell communication if there are only few number of cells in certain cell groups
cellchat <- filterCommunication(cellchat, min.cells = 10)
# Infer the cell-cell communication at a signaling pathway level
cellchat <- computeCommunProbPathway(cellchat)
# Calculate the aggregated cell-cell communication network
# cellchat <- aggregateNet(cellchat)
result <-  subsetCommunication(cellchat)

used.time = Sys.time() - ptm
used.memory <- mem_used()
print(as.numeric(used.time, units = "secs"))

result <- result[,1:5]
colnames(result) <- c('Sender','Receiver','Ligand', 'Receptor', 'LRscore')
result <- result[which(result$Sender != result$Receiver),]
result$Ligand <- gsub('_', '&', result$Ligand)
result$Receptor <- gsub('_', '&', result$Receptor)
result$all <- paste(result$Sender, result$Ligand, result$Receiver, result$Receptor, sep = '_')
result <- dplyr::distinct(result, all, .keep_all = TRUE)

result_record <- list(result=result, 
                      used_time = paste0(round(used.time/60,3), ' min'), 
                      used_memory =  round(used.memory/1024/1024/1024,3))

saveRDS(result_record, file = "./result/result.rds")

result_new <- result$result
result_new$Sender <- gsub("_","-",result_new$Sender)
result_new$Receiver <- gsub("_","-",result_new$Receiver)
result_new$Sender <- gsub("Cancer-Epithelial", "Cancer Epithelial", result_new$Sender)
result_new$Receiver <- gsub("Cancer-Epithelial", "Cancer Epithelial", result_new$Receiver)
result_new$all <- paste(result_new$Sender, result_new$Ligand, result_new$Receiver, result_new$Receptor, sep = '_')

result$result <- result_new
result_record <- result


