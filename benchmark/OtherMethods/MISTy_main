#############
## prepare ##
#############

# MISTy
library(mistyR)

library(future)

# Seurat
library(Seurat)
library(Giotto)

# data manipulation
library(Matrix)
library(tibble)
library(dplyr)
library(purrr)

# normalization
library(sctransform)

# resource
library(progeny)
library(lobstr)
# setup parallel execution
options(future.globals.maxSize = 1024^3)
plan(multisession)

rm(list=ls())
gc()

setwd("~/cell_cell_interaction/apply_in_stCID/OtherMethods/MISTy/")

source('./code.R')

ptm = Sys.time()

ser <- readRDS("~/cell_cell_interaction/LRBench/CID4465/STser.rds")
# run normalization
sct.data <- vst(GetAssayData(
  object = ser,
  slot = "counts",
  assay = "Spatial"
),
verbosity = 0
)

ser[["SCT"]] <- CreateAssayObject(data = sct.data$y)

gene.expression <- GetAssayData(ser, assay = "SCT")
coverage <- rowSums(gene.expression > 0) / ncol(gene.expression)
slide.markers <- names(which(coverage >= 0.05))

Databases <- readRDS('~/cell_cell_interaction/apply_in_stCID/OtherMethods/stMLnet/Databases.rds')
ligands <- Databases$LigRec.DB$source %>% unique() %>% .[. %in% slide.markers]
receptors <- Databases$LigRec.DB$target %>% unique() %>% .[. %in% slide.markers]

icgs <- readRDS("~/cell_cell_interaction/apply_in_stCID/input/CID4465_bc_ICGs.rds")

celltypes <- ser$celltype %>% as.character()
remove_ct <- as.character(names(which(table(ser$celltype)<3)))
if (length(remove_ct)>0) {
  celltypes <- celltypes[-which(celltypes %in% remove_ct)]
}

receiver = NULL
if(is.null(receiver)){
  receiver_ct <- unique(ser$celltype)
}else if(!is.null(receiver)){
  receiver_ct <- receiver
}
rm(receiver);gc()

geometry <- ser@images$image@coordinates %>% select(., row,col)

for (receiver in receiver_ct) {
  ct <- receiver
  message(paste0('running jobs:',ct))
  targets <- icgs[[ct]] %>% unlist() %>% unique()
  
  ###############
  ## parameter ##
  ###############
  
  view.assays <- list(
    "main" = "SCT",
    "ligand" = "SCT"
  )
  
  # Define features for each view
  view.features <- list(
    "main" = c(targets,receptors),  # c(receptors)
    "ligand" = ligands
  )
  
  # Define spatial context for each view
  view.types <- list(
    "main" = "intra",
    "ligand" = "para"
  )
  
  # Define additional parameters (l in the case of paraview)
  view.params <- list(
    "main" = NULL,
    "ligand" = 10
  )
  
  # Define specific properties for each view
  view.properties <- list(
    "main" = ifelse(celltypes == ct,1,0),
    "ligand" = ifelse(celltypes != ct,1,0)
  )
  
  #########
  ## Run ##
  #########
  
  spot.ids = NULL
  out.alias = paste0("results_",ct,"_paraview_10")
  
  # Extracting data
  view.data <- map(view.assays,
                   extract_seurat_data,
                   geometry = geometry,
                   visium.slide = ser
  )
  str(view.data,max.level = 1)
  
  # Adding all spots ids in case they are not defined
  if (is.null(spot.ids)) {
    spot.ids <- rownames(view.data[[1]])
  }
  
  # First filter the features from the data
  view.data.filt <- map2(view.data, view.features, filter_data_features)
  str(view.data.filt,max.level = 1)
  view.data.filt[[1]][1:4,1:1]
  view.data.filt[[2]][1:4,1:1]
  
  # specific properties: celltype
  view.data.spec <- map2(view.data.filt, view.properties, add_specific_properties)
  str(view.data.spec,max.level = 1)
  view.data.spec[[1]][1:6,1:2]
  view.data.spec[[2]][1:6,1:2]
  
  # Create initial view
  views.main <- create_initial_view(view.data.spec[[1]] %>%
                                      rownames_to_column() %>%
                                      filter(rowname %in% spot.ids) %>%
                                      select(-rowname))
  str(views.main,max.level = 2)
  
  # Create other views
  view.names <- names(view.data.spec)
  
  all.views <- pmap(list(
    view.data.filt[-1],
    view.types[-1],
    view.params[-1],
    view.names[-1]
  ),
  create_default_views,
  spot.ids = spot.ids,
  geometry = geometry
  )
  str(all.views,max.level = 2)
  
  pline.views <- add_views(
    views.main,
    unlist(all.views, recursive = FALSE)
  )
  
  # Run MISTy
  run_misty(pline.views, out.alias)
  misty.results <- collect_results(out.alias)
  
  ############
  ## output ##
  ############
  
  misty_score <- misty.results$importances.aggregated %>% na.omit()
  misty_score <- misty_score %>% 
    select(Predictor,Target,Importance,view) %>%
    filter(Target %in% targets, Predictor %in% c(ligands,receptors)) %>%
    rename(regulon=Predictor,target=Target,value=Importance,type=view)
  misty_score$type <- gsub('_10','',misty_score$type)
  misty_score$type <- gsub('intra','receptor',misty_score$type)
  
  saveRDS(misty_score,paste0(out.alias,'/misty_score.rds'))
}



used.time = Sys.time() - ptm
used.memory <- mem_used()
print(as.numeric(used.time, units = "secs"))
print(as.numeric(used.memory/60/60/60, units = "GB"))

