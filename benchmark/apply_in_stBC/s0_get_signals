#############
#  library  #
#############

library(Matrix)
library(dplyr)
library(Seurat) # V4.0.2
library(RCTD)
library(Giotto)
library(ggsci)
library(ggpubr)
library(ggplot2)

rm(list = ls())
gc()

setwd("E:/stMLnet/apply_in_stBC/")

source('../p0_code/code.R')

############
### RCTD ###
############

## creat reference
sc_bc <- readRDS("./input/sc_bc.rds")
counts <- sc_bc[['SCT']]@data %>% round()
cell_types <- sc_bc$celltype; names(cell_types) <- colnames(sc_bc) 
cell_types <- as.factor(cell_types) 
nUMI <- sc_bc$nCount_RNA  %>% round(); names(nUMI) <- colnames(sc_bc)
reference <- Reference(counts, cell_types, nUMI)

## creat SpatialRNA
st_bc_A <- readRDS("./input/st_bc_A.rds")
counts <- st_bc_A[['Spatial']]@counts
coords <- st_bc_A@images$slice@coordinates[,2:3]
nUMI <- st_bc_A$nCount_SCT
puck <- SpatialRNA(coords, counts, nUMI)

## run RCTD
myRCTD <- create.RCTD(puck, reference, max_cores = 4, 
                      CELL_MIN_INSTANCE = 10, gene_cutoff = 1e-05,)
# myRCTD <- run.RCTD(myRCTD, doublet_mode = 'doublet')
myRCTD <- fitBulk(myRCTD)
# myRCTD <- choose_sigma_c(myRCTD)
# myRCTD <- fitPixels(myRCTD, doublet_mode = doublet_mode)

## result
weights <- t(st_bc_A[['predictions']]@data[-8,])
weights <- weights[colnames(myRCTD@spatialRNA@counts),]

results_df <- data.frame(spot_class = rep("doublet_certain", times = dim(weights)[1]),
                         first_type = colnames(weights)[apply(weights, 1, which.max)],
                         second_type = colnames(weights)[apply(weights, 1, function(x){order(x,decreasing = T)[2]})])
rownames(results_df) <- rownames(weights)

weights_doublet <- lapply(1:dim(weights)[1], function(i){
  c(weights[i,match(results_df[i,2],colnames(weights))],
    weights[i,match(results_df[i,3],colnames(weights))])
})
weights_doublet <- do.call('rbind',weights_doublet)
colnames(weights_doublet) <- colnames(results_df)[2:3]
rownames(weights_doublet) <- rownames(weights)
weights_doublet <- sweep(weights_doublet, 1, rowSums(weights_doublet), '/')

results <- list(weights = as.sparse(weights),
                results_df = results_df,
                weights_doublet = weights_doublet)

## deconvolution

parallel::detectCores()
no_cores <- 6
cl <- makeCluster(no_cores)
clusterExport(cl, c("results","myRCTD"))
clusterEvalQ(cl, library(Matrix))
DGE <- parLapply(cl, 1:dim(results_df)[1], decompose_doublet_fast)
DGE = do.call('rbind', DGE)
stopCluster(cl)

## input for downstream analysis
de_coords <- myRCTD@spatialRNA@coords[rownames(results_df), c("x", "y")]
de_cell_type = data.frame(Barcode = rownames(results_df),Cluster = results_df$first_type)

de_count <- DGE
de_count = t(de_count)
rownames(de_count) = myRCTD@internal_vars$gene_list_bulk
colnames(de_count) = rownames(results_df)

save(de_count, de_cell_type, de_coords, myRCTD, file = "./input/output_bc.RData")

############
## Giotto ##
############

## workdir
temp_dir = './preprocess/'
myinstructions = createGiottoInstructions(save_dir = temp_dir,
                                          save_plot = TRUE, 
                                          show_plot = TRUE,
                                          python_path = "D:\\Miniconda3\\envs\\R36\\python.exe")

### Create a Giotto object 
gio_bc <- createGiottoObject(raw_exprs = de_count,
                             spatial_locs = de_coords,
                             instructions = myinstructions)

gio_bc <- addCellMetadata(gobject = gio_bc, 
                          new_metadata = de_cell_type$Cluster, 
                          vector_name = "celltype")

### normalize
gio_bc <- normalizeGiotto(gio_bc)
gio_bc <- addStatistics(gobject = gio_bc)

### create a spatial Delaunay network (default)
gio_bc = createSpatialNetwork(gobject = gio_bc, method = "Delaunay")
spatPlot(gobject = gio_bc, show_network = T, legend_symbol_size = 2,
         network_color = 'blue', spatial_network_name = 'Delaunay_network',
         point_size = 2.5, cell_color = 'celltype')

### select top 25th highest expressing genes
gene_metadata = fDataDT(gio_bc)
lapply(seq(0.1,1,0.05), quantile, x = gene_metadata$mean_expr_det, na.rm = T) %>% unlist()
high_expressed_genes = gene_metadata[mean_expr_det > 0.75]$gene_ID  # mean_expr_det > 0.75

### identify ICGs
message(paste0('Start at ',as.character(t1)))
CPGscoresHighGenes =  findICG(gobject = gio_bc, 
                              selected_genes = high_expressed_genes,
                              spatial_network_name = 'Delaunay_network',
                              cluster_column = 'celltype',
                              diff_test = 'permutation', 
                              adjust_method = 'fdr',
                              nr_permutations = 500,
                              do_parallel = T, cores = 6)

### filter ICGs
CPGscoresFilt = filterICG(CPGscoresHighGenes, direction = "both")
table(CPGscoresFilt$CPGscores$spec_int[CPGscoresFilt$CPGscores$cell_type=="Malignant"])
ICGs_list = lapply(unique(CPGscoresFilt$CPGscores$cell_type), function(x){
  y=CPGscoresFilt$CPGscores[CPGscoresFilt$CPGscores$cell_type==x,]
  z=lapply(unique(y$int_cell_type), function(t){
    y$genes[y$int_cell_type==t]
  })
  names(z)=unique(y$int_cell_type)
  z
})
names(ICGs_list) = unique(CPGscoresFilt$CPGscores$cell_type)
str(ICGs_list)

saveRDS(ICGs_list, file = "./input/10X_bc_ICGs.rds")
saveRDS(gio_bc, file = "./input/giotto_bc.rds")

###############
## LigFilter ##
###############

## load
st_bc_A <- readRDS("./input/st_bc_A.rds")
load(file = "./input/output_bc.RData")

## check
head(de_cell_type)
de_cell_type$Barcode <- de_cell_type$Barcode %>% as.character() %>% gsub('[.]','-',.)

head(de_coords)
rownames(de_coords) <- rownames(de_coords) %>% as.character() %>% gsub('[.]','-',.)

dim(de_count)
colnames(de_count) <- colnames(de_count) %>% as.character() %>% gsub('[.]','-',.)

## update Seurat object

DefaultAssay(st_bc_A) <- 'Spatial'
st_bc_A_RCTD <- subset(st_bc_A, 
                       cells = de_cell_type$Barcode %>% as.character(),
                       features = rownames(de_count))
st_bc_A_RCTD[['RCTD']] <- CreateAssayObject(counts = de_count)
st_bc_A_RCTD$RCTD_cellType <- de_cell_type$Cluster[match(rownames(st_bc_A_RCTD@meta.data),
                                                         de_cell_type$Barcode)]
DefaultAssay(st_bc_A_RCTD) <- 'RCTD'
Idents(st_bc_A_RCTD) <- st_bc_A_RCTD$RCTD_cellType

## ligands
Databases <- readRDS('../prior_knowledge/output/Databases.rds')
ligs_in_db <- Databases$LigRec.DB$source %>% unique()
ligs_in_db <- intersect(ligs_in_db, rownames(st_bc_A_RCTD))

clusters <- st_bc_A_RCTD@active.ident %>% as.character() %>% unique()
df_markers_ligs <- lapply(clusters, function(cluster){
  
  df <- FindMarkers(st_bc_A_RCTD, ident.1 = cluster, features = ligs_in_db, only.pos = T, 
                    min.pct = 0.05) # min.pct=0.05才会有IL6
  df$gene <- rownames(df)
  df$ident.1 <- cluster
  df
  
}) %>% do.call('rbind',.)

Ligs_up_list <- split(df_markers_ligs$gene,df_markers_ligs$ident.1)
str(Ligs_up_list)

saveRDS(Ligs_up_list, "./input/10X_bc_Ligs_up_yll.rds")

###############
## RecFilter ##
###############

## load
gio_bc <- readRDS("./input/giotto_bc.rds")
data <- gio_bc@norm_expr
BarCluTable <- gio_bc@cell_metadata[,1:2]
colnames(BarCluTable) <- c('Barcode','Cluster')

## 参数
expr.ct <- 0.1
pct.ct <- 0.05

## 载入LigRec数据库
Databases <- readRDS('../prior_knowledge/output/Databases.rds')
recs_in_db <- Databases$LigRec.DB$target %>% unique()

## 计算mean和pct
clusters <- BarCluTable$Cluster %>% as.character() %>% unique()

meanExpr_of_LR <- lapply(clusters, function(cluster){
  
  cluster.ids <- BarCluTable$Barcode[BarCluTable$Cluster == cluster]
  source_mean <- rowMeans(data[,cluster.ids])
  names(source_mean) <- rownames(data)
  source_mean
  
}) %>% do.call('cbind',.) %>% as.data.frame()
colnames(meanExpr_of_LR) <- clusters

pct_of_LR <- lapply(clusters, function(cluster){
  
  cluster.ids <- BarCluTable$Barcode[BarCluTable$Cluster == cluster]
  dat <- data[,cluster.ids]
  pct <- rowSums(dat>0)/ncol(dat)
  names(pct) <- rownames(data)
  pct
  
}) %>% do.call('cbind',.) %>% as.data.frame()
colnames(pct_of_LR) <- clusters

Recs_expr_list <- lapply(clusters, function(cluster){
  
  recs <- rownames(data)[meanExpr_of_LR[,cluster] >= expr.ct & pct_of_LR[,cluster] >= pct.ct]
  intersect(recs, recs_in_db)
  
})
names(Recs_expr_list) <- clusters
str(Recs_expr_list)

saveRDS(Recs_expr_list, "./input/10X_bc_Recs_expr.rds")
