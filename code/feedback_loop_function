# calculate and plot feedback loop function

process_ml_net <- function(mlnet, lig_key = NULL, tar_key = NULL) {
  if (!is.null(lig_key)) {
    mlnet$LigRec <- mlnet$LigRec[mlnet$LigRec$source %in% lig_key, ]
  }
  if (!is.null(tar_key)) {
    mlnet$TFTar <- mlnet$TFTar[mlnet$TFTar$target %in% tar_key, ]
  }
  if (!is.null(mlnet$LigRec)) {
    mlnet$RecTF <- mlnet$RecTF[mlnet$RecTF$source %in% mlnet$LigRec$target, ]
  }
  if (!is.null(mlnet$TFTar)) {
    mlnet$RecTF <- mlnet$RecTF[mlnet$RecTF$target %in% mlnet$TFTar$source, ]
  }
  if (!is.null(mlnet$RecTF)) {
    mlnet$LigRec <- mlnet$LigRec[mlnet$LigRec$target %in% mlnet$RecTF$source, ]
  }
  
  ligrec <- data.frame(Ligand = mlnet$LigRec$source, Receptor = mlnet$LigRec$target)
  rectf <- data.frame(Receptor = mlnet$RecTF$source, TF = mlnet$RecTF$target)
  tftg <- data.frame(TF = mlnet$TFTar$source, Target = mlnet$TFTar$target)
  res <- ligrec %>% 
    merge(., rectf, by = "Receptor") %>% 
    merge(., tftg, by = "TF") %>% 
    dplyr::select(Ligand, Receptor, TF, Target) %>% 
    arrange(Ligand, Receptor)
  
  return(res)
}

plot_feedback_loop <- function(floop,wd_path){
  
  nodes <- c(fbloop$Sender, fbloop$Receiver) %>% unlist(.) %>% unique()
  edges <- list()  
  
  for (i in 1:length(fbloop$Sender)) {
    edge_i <- c(fbloop$Sender[i], fbloop$Receiver[i])
    edges <- append(edges, list(edge_i))  # 将每个 edge_i 作为一个列表元素添加到 edges 中
  }
  edges <- unlist(edges)
  vertex_colors <- mycolor_ct[names(mycolor_ct)  %in% nodes]
  graph <- graph(edges = edges, directed = TRUE)
  
  edge_labels <- list()
  for (i in 1:length(fbloop$Siganl)){
    sig <- strsplit(fbloop$Siganl[i]," ")[[1]]
    if (length(sig)!=1){
      label <- paste0(sig[1],"/",sig[2])
    }else{
      label <- sig
    }
    edge_labels <- append(edge_labels, label)
    
    
  }
  edge_labels <- unlist(edge_labels)
  
  # edge_labels <- c("C3/GPC3", "FN1/TGM2", "C3/GPC3", "NID1/VCAN", "FN1/TGM2", "NID1/VCAN")
  # edge_labels_color <- c("#6BD76B99","#837B8D99","#6BD76B99","#80226899","#837B8D99","#80226899")
  
  plotdir = paste0(wd_path,'/visualize/')
  dir.create(plotdir,recursive = T)
  pdf(paste0(plotdir,"plot_feedback_loop_all_cp.pdf"), width = 6, height = 6)  # 设置文件名和图像大小
  p1 <- plot(
    graph, 
    #layout = layout,              
    vertex.color = vertex_colors,   
    vertex.size = 40,             
    vertex.label.color = "black", 
    edge.width = 1.5,
    edge.arrow.size = 1,        
    edge.color = "gray",          
    edge.label = edge_labels,     
    edge.label.cex = 0.8,         
    edge.curved = 0.2,             
    edge.label.cex = 0.8,       
    edge.label.dist = 3,    
    edge.label.angle = 0.5,         
    edge.label.color = 'black'
  )
  dev.off()
}


# 定义绘制反馈网络的函数
plot_feedback_network <- function(wd_path, ct1,ct2,ct1_key,ct2_key,vertex.size,rescale,do.check) {
  
  mlnet1 <- readRDS(paste0(wd_path, '/runscMLnet/', paste(ct1, ct2, sep = '_'), '/scMLnet.rds'))
  mlnet2 <- readRDS(paste0(wd_path, '/runscMLnet/', paste(ct2, ct1, sep = '_'), '/scMLnet.rds'))

  res_ct1_key1 <- process_ml_net(mlnet1, lig_key = ct1_key)
  res_ct1_loop <- res_ct1_key1[res_ct1_key1$Target %in% ct2_key,]

  res_ct2_key2 <- process_ml_net(mlnet2, lig_key = ct2_key)
  res_ct2_loop <- res_ct2_key2[res_ct2_key2$Target %in% ct1_key, ]

  if (dim(res_ct1_loop)[1]==0){
    cat('Cannot find',ct2_key,'in Target of', ct1,'->',ct2)
    return()  # 跳出当前函数
  }else if(dim(res_ct2_loop)[1]==0){
    cat('Cannot find',ct1_key,'in Target of', ct2,'->',ct1)
    return() # 跳出当前函数
  }
  
  if (do.check){
    
    if (length(unique(res_ct1_loop$Receptor))>2){
      cut_recs <- unique(res_ct1_loop$Receptor)[1:2]
      res_ct1_loop_cut <- res_ct1_loop[res_ct1_loop$Receptor %in% cut_recs,] 
      res_ct1_loop <- res_ct1_loop_cut
    }
    
    if(length(unique(res_ct1_loop$TF))>2){
      cut_tfs <- unique(res_ct1_loop$TF)[1:2]
      res_ct1_loop_cut <- res_ct1_loop[res_ct1_loop$TF %in% cut_tfs,] 
      res_ct1_loop <- res_ct1_loop_cut
    }
    
    if (length(unique(res_ct2_loop$Receptor))>2){
      cut_recs <- unique(res_ct2_loop$Receptor)[1:2]
      res_ct2_loop_cut <- res_ct2_loop[res_ct2_loop$Receptor %in% cut_recs,] 
      res_ct2_loop <- res_ct2_loop_cut
    }
    
    if(length(unique(res_ct2_loop$TF))>2){
      cut_tfs <- unique(res_ct2_loop$TF)[1:2]
      res_ct2_loop_cut <- res_ct2_loop[res_ct2_loop$TF %in% cut_tfs,] 
      res_ct2_loop <- res_ct2_loop_cut
    }
  }
  
  # if (res_ct1_loop$Ligand==res_ct1_loop$Receptor){
  #   res_ct1_loop$Receptor <- paste0(res_ct1_loop$Receptor,'.rec')
  # }
  
  if (dim(res_ct1_loop)[1]==1){
    df_ct1_loop <- res_ct1_loop
    df_ct1_loop$Receptor <- paste0(df_ct1_loop$Receptor,".rec1")
    df_ct1_loop$TF <- paste0(df_ct1_loop$TF,".tf1")
    df_ct1_loop$Target <- paste0(df_ct1_loop$Target,".tg")
  }else{
    df_ct1_loop <- data.frame(Ligand = NA, Receptor = NA, TF = NA, Target = NA)
    df_ct1_loop$Ligand <- unique(res_ct1_loop$Ligand)
    if (length(unique(res_ct1_loop$Receptor))==1){
      df_ct1_loop$Receptor = unique(res_ct1_loop$Receptor)
      df_ct1_loop$Receptor <- paste0(unique(res_ct1_loop$Receptor), ".rec1")
    }else{
      df_ct1_loop$Receptor = paste0(paste(unique(res_ct1_loop$Receptor), collapse = "/"), ".rec1")
    }
    
    if (length(unique(res_ct1_loop$TF))==1){
      df_ct1_loop$TF = unique(res_ct1_loop$TF)
      df_ct1_loop$TF <- paste0(unique(res_ct1_loop$TF), ".tf1")
    }else{
      df_ct1_loop$TF = paste0(paste(unique(res_ct1_loop$TF), collapse = "/"), ".tf1")
    }
    
    if (length(unique(res_ct1_loop$Target))==1){
      df_ct1_loop$Target = unique(res_ct1_loop$Target)
      df_ct1_loop$Target <- paste0(unique(res_ct1_loop$Target), ".tg")
    }else{
      df_ct1_loop$Target = paste(unique(res_ct1_loop$Target), collapse = "/",".tg")
    }
  }
  
  
  if (dim(res_ct2_loop)[1]==1){
    df_ct2_loop <- res_ct2_loop
    df_ct2_loop$Receptor <- paste0(df_ct2_loop$Receptor,".rec2")
    df_ct2_loop$TF <- paste0(df_ct2_loop$TF,".tf2")
    df_ct2_loop$Ligand <- paste0(df_ct2_loop$Ligand,".tg")
  }else{
    df_ct2_loop <- data.frame(Ligand = NA, Receptor = NA, TF = NA, Target = NA)
    df_ct2_loop$Ligand <- unique(res_ct2_loop$Ligand)
    df_ct2_loop$Ligand <- paste0(unique(res_ct2_loop$Ligand), ".tg")
    if (length(unique(res_ct2_loop$Receptor))==1){
      df_ct2_loop$Receptor = unique(res_ct2_loop$Receptor)
      df_ct2_loop$Receptor <- paste0(unique(res_ct2_loop$Receptor), ".rec2")
    }else{
      df_ct2_loop$Receptor = paste0(paste(unique(res_ct2_loop$Receptor), collapse = "/"), ".rec2")
    }
    
    if (length(unique(res_ct2_loop$TF))==1){
      df_ct2_loop$TF = unique(res_ct2_loop$TF)
      df_ct2_loop$TF <- paste0(unique(res_ct2_loop$TF), ".tf2")
    }else{
      df_ct2_loop$TF = paste0(paste(unique(res_ct2_loop$TF), collapse = "/"), ".tf2")
    }
    
    if (length(unique(res_ct2_loop$Target))==1){
      df_ct2_loop$Target = unique(res_ct2_loop$Target)
    }else{
      df_ct2_loop$Target = paste(unique(res_ct2_loop$Target), collapse = "/")
    }
    
  }
  
  nodes <- c(df_ct1_loop, df_ct2_loop) %>% unlist(.) %>% unique()
  
  edges1 <- c(
    df_ct1_loop$Ligand, df_ct1_loop$Receptor,
    df_ct1_loop$Receptor, df_ct1_loop$TF,
    df_ct1_loop$TF, df_ct1_loop$Target,
    df_ct2_loop$Ligand, df_ct2_loop$Receptor,
    df_ct2_loop$Receptor, df_ct2_loop$TF,
    df_ct2_loop$TF, df_ct1_loop$Ligand
  )
  
  coords <- matrix(c(0, 1,    # VEGFA
                     1, 1,    # FLT1
                     2, 1,    # RELA
                     2, 0,    # FN1
                     1, 0,    # SDC4
                     0, 0),   # NFKB1
                   ncol = 2, byrow = TRUE)
  coords[, 1] <- coords[, 1] * 1
  
  x_offset <- (max(coords[, 1]) - min(coords[, 1])) / 2
  y_offset <- (max(coords[, 2]) - min(coords[, 2])) / 2
  coords[, 1] <- coords[, 1] - min(coords[, 1]) - x_offset
  coords[, 2] <- coords[, 2] - min(coords[, 2]) - y_offset
  
  vertex_colors <- c("#D43F3ACC",   
                     "#EEA236CC",  
                     "#5CB85CCC",  
                     "#D43F3ACC", 
                     "#EEA236CC",  
                     "#5CB85CCC")  
  
  edge_lty <- c(2, 2, 2, 1, 1, 1, 1)  
  
  plotdir = paste0(wd_path,'/visualize/')
  dir.create(plotdir,recursive = T)
  
  pdf(paste0(plotdir,"plot_feedback_",ct1,"_",ct1_key,"_",ct2,"_",ct2_key,"_1.pdf"), width = 10, height = 6)  # 设置文件名和图像大小
  plot(
    graph(edges = edges1, directed = TRUE), 
    layout = coords,            
    vertex.size = vertex.size,   
    vertex.label.cex = 1,        
    vertex.color = vertex_colors,
    vertex.frame.color = "black",
    edge.arrow.size = 0.9,       
    edge.color = "#696969",      
    vertex.label.color = "black",
    rescale = rescale,             
    edge.lty = edge_lty          #
  )
  # add line of node
  legend(
    #"bottom",                     
    x = 0.2, y = -0.7,
    legend = c(paste0(ct1,"->",ct2),    
               paste0(ct2,"->",ct1)),
    lty = c(2, 1),                  
    col = "#696969",                
    title = "Edge Types",           
   # horiz = TRUE,                            
    cex = 0.8                       
  )
  # add legend of node
  legend(
    #"bottom",                       
    x = -0.6, y = -0.7,        
    legend = c("Ligand/Target", "Receptor", "TF"),  
    fill = c("#D43F3ACC", "#EEA236CC", "#5CB85CCC"), 
    title = "Nodes",                  
    #horiz = TRUE,                            
    cex = 0.8                         
  )
  
  dev.off()
}


